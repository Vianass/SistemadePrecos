// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using SistemaPrecos.Core.Data;

#nullable disable

namespace SistemaPrecos.Core.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250317013019_AjusteManyToMany")]
    partial class AjusteManyToMany
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CategoriaProduto", b =>
                {
                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer");

                    b.Property<int>("IdProduto")
                        .HasColumnType("integer");

                    b.HasKey("IdCategoria", "IdProduto");

                    b.HasIndex("IdProduto");

                    b.ToTable("categoria_produto", (string)null);
                });

            modelBuilder.Entity("RelatorioLoja", b =>
                {
                    b.Property<int>("IdRelatoro")
                        .HasColumnType("integer")
                        .HasColumnName("id_relatoro");

                    b.Property<int>("IdLoja")
                        .HasColumnType("integer")
                        .HasColumnName("id_loja");

                    b.HasKey("IdRelatoro", "IdLoja")
                        .HasName("relatorio_loja_pkey");

                    b.HasIndex("IdLoja");

                    b.ToTable("relatorio_loja", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<DateTime>("DataCriacao")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<int>("Tipo")
                        .HasColumnType("integer");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.AvaliacaoPreco", b =>
                {
                    b.Property<int>("IdAvaliacao")
                        .HasColumnType("integer")
                        .HasColumnName("id_avaliacao");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("comentario");

                    b.Property<string>("Confiabilidade")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("confiabilidade");

                    b.Property<int>("IdPreco")
                        .HasColumnType("integer")
                        .HasColumnName("id_preco");

                    b.HasKey("IdAvaliacao")
                        .HasName("avaliacao_preco_pkey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("IdPreco");

                    b.ToTable("avaliacao_preco", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Categoria", b =>
                {
                    b.Property<int>("IdCategoria")
                        .HasColumnType("integer")
                        .HasColumnName("id_categoria");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nome");

                    b.HasKey("IdCategoria")
                        .HasName("categoria_pkey");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Loja", b =>
                {
                    b.Property<int>("IdLoja")
                        .HasColumnType("integer")
                        .HasColumnName("id_loja");

                    b.Property<decimal>("Contacto")
                        .HasColumnType("numeric")
                        .HasColumnName("contacto");

                    b.Property<DateOnly>("DataCriacao")
                        .HasColumnType("date")
                        .HasColumnName("data_criacao");

                    b.Property<string>("Localizacao")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("localizacao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nome");

                    b.HasKey("IdLoja")
                        .HasName("loja_pkey");

                    b.ToTable("loja", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Mensagem", b =>
                {
                    b.Property<int>("IdMensagem")
                        .HasColumnType("integer")
                        .HasColumnName("id_mensagem");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Conteudo")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("conteudo");

                    b.Property<DateOnly>("DataEnvio")
                        .HasColumnType("date")
                        .HasColumnName("data_envio");

                    b.HasKey("IdMensagem")
                        .HasName("mensagem_pkey");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("mensagem", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Preco", b =>
                {
                    b.Property<int>("IdPreco")
                        .HasColumnType("integer")
                        .HasColumnName("id_preco");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Credibilidade")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("credibilidade");

                    b.Property<DateOnly>("DataHora")
                        .HasColumnType("date")
                        .HasColumnName("data_hora");

                    b.Property<int>("IdLoja")
                        .HasColumnType("integer")
                        .HasColumnName("id_loja");

                    b.Property<int>("IdProduto")
                        .HasColumnType("integer")
                        .HasColumnName("id_produto");

                    b.Property<decimal>("Valor")
                        .HasColumnType("numeric")
                        .HasColumnName("valor");

                    b.HasKey("IdPreco")
                        .HasName("preco_pkey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("IdLoja");

                    b.HasIndex("IdProduto");

                    b.ToTable("preco", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .HasColumnType("integer")
                        .HasColumnName("id_produto");

                    b.Property<string>("ApplicationUserId")
                        .IsRequired()
                        .HasColumnType("varchar(450)")
                        .HasColumnName("application_user_id");

                    b.Property<string>("Descricao")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("descricao");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("nome");

                    b.Property<int?>("RelatorioIdRelatorio")
                        .HasColumnType("integer");

                    b.Property<string>("TipoCategoria")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("IdProduto")
                        .HasName("produto_pkey");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("RelatorioIdRelatorio");

                    b.ToTable("produto", (string)null);
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Relatorio", b =>
                {
                    b.Property<int>("IdRelatorio")
                        .HasColumnType("integer")
                        .HasColumnName("id_relatorio");

                    b.Property<string>("Dados")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("dados");

                    b.Property<DateOnly>("DataGeracao")
                        .HasColumnType("date")
                        .HasColumnName("data_geracao");

                    b.Property<int>("IdLoja")
                        .HasColumnType("integer")
                        .HasColumnName("id_loja");

                    b.Property<int>("IdProduto")
                        .HasColumnType("integer")
                        .HasColumnName("id_produto");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("character varying")
                        .HasColumnName("tipo");

                    b.HasKey("IdRelatorio")
                        .HasName("relatorio_pkey");

                    b.HasIndex("IdLoja");

                    b.HasIndex("IdProduto");

                    b.ToTable("relatorio", (string)null);
                });

            modelBuilder.Entity("CategoriaProduto", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Models.Categoria", null)
                        .WithMany()
                        .HasForeignKey("IdCategoria")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SistemaPrecos.Core.Models.Produto", null)
                        .WithMany()
                        .HasForeignKey("IdProduto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RelatorioLoja", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Models.Loja", null)
                        .WithMany()
                        .HasForeignKey("IdLoja")
                        .IsRequired()
                        .HasConstraintName("id_loja");

                    b.HasOne("SistemaPrecos.Core.Models.Relatorio", null)
                        .WithMany()
                        .HasForeignKey("IdRelatoro")
                        .IsRequired()
                        .HasConstraintName("id_relatorio");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.AvaliacaoPreco", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Entities.ApplicationUser", "UserNavigation")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired();

                    b.HasOne("SistemaPrecos.Core.Models.Preco", "IdPrecoNavigation")
                        .WithMany("AvaliacaoPrecos")
                        .HasForeignKey("IdPreco")
                        .IsRequired()
                        .HasConstraintName("id_preco");

                    b.Navigation("IdPrecoNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Mensagem", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Entities.ApplicationUser", "UserNavigation")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired()
                        .HasConstraintName("fk_mensagem_user");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Preco", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Entities.ApplicationUser", "UserNavigation")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired()
                        .HasConstraintName("application_user_id");

                    b.HasOne("SistemaPrecos.Core.Models.Loja", "IdLojaNavigation")
                        .WithMany("Precos")
                        .HasForeignKey("IdLoja")
                        .IsRequired()
                        .HasConstraintName("id_loja");

                    b.HasOne("SistemaPrecos.Core.Models.Produto", "IdProdutoNavigation")
                        .WithMany("Precos")
                        .HasForeignKey("IdProduto")
                        .IsRequired()
                        .HasConstraintName("id_produto");

                    b.Navigation("IdLojaNavigation");

                    b.Navigation("IdProdutoNavigation");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Produto", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Entities.ApplicationUser", "UserNavigation")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId")
                        .IsRequired()
                        .HasConstraintName("fk_produto_user");

                    b.HasOne("SistemaPrecos.Core.Models.Relatorio", null)
                        .WithMany("IdProdutos")
                        .HasForeignKey("RelatorioIdRelatorio");

                    b.Navigation("UserNavigation");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Relatorio", b =>
                {
                    b.HasOne("SistemaPrecos.Core.Models.Loja", "IdLojaNavigation")
                        .WithMany("Relatorios")
                        .HasForeignKey("IdLoja")
                        .IsRequired()
                        .HasConstraintName("id_loja");

                    b.HasOne("SistemaPrecos.Core.Models.Produto", "IdProdutoNavigation")
                        .WithMany("Relatorios")
                        .HasForeignKey("IdProduto")
                        .IsRequired()
                        .HasConstraintName("id_produto");

                    b.Navigation("IdLojaNavigation");

                    b.Navigation("IdProdutoNavigation");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Loja", b =>
                {
                    b.Navigation("Precos");

                    b.Navigation("Relatorios");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Preco", b =>
                {
                    b.Navigation("AvaliacaoPrecos");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Produto", b =>
                {
                    b.Navigation("Precos");

                    b.Navigation("Relatorios");
                });

            modelBuilder.Entity("SistemaPrecos.Core.Models.Relatorio", b =>
                {
                    b.Navigation("IdProdutos");
                });
#pragma warning restore 612, 618
        }
    }
}
